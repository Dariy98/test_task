{"version":3,"sources":["App.js","index.js"],"names":["App","useState","year","setYear","GET_DATA","gql","useLazyQuery","getLaunches","loading","data","className","type","placeholder","onChange","event","target","value","onClick","variables","launchesPast","map","launch","key","mission_name","launch_date_local","launch_site","site_name_long","rocket","rocket_name","ships","ship","src","alt","image","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mpBA2FeA,MAtFf,WAAgB,IAAD,EACWC,mBAAS,MADpB,mBACNC,EADM,KACAC,EADA,KAGPC,EAAWC,cAAH,KAHD,EAqB4BC,uBAAaF,GArBzC,mBAqBNG,EArBM,YAqBSC,EArBT,EAqBSA,QAASC,EArBlB,EAqBkBA,KAM/B,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,2BACEC,KAAK,OACLC,YAAY,oBACZF,UAAU,QACVG,SAXS,SAACC,GAChBX,EAAQW,EAAMC,OAAOC,UAajB,4BACEC,QAAS,kBAAMV,EAAY,CAAEW,UAAW,CAAEhB,WAC1CQ,UAAU,UAFZ,gBAOCF,GAAW,iDAEP,OAAJC,QAAI,IAAJA,OAAA,EAAAA,EAAMU,eACL,4BACGV,EAAKU,aAAaC,KAAI,SAACC,GACtB,OACE,wBAAIC,IAAKD,EAAOE,cACd,4CAAkBF,EAAOE,cACzB,qCAAWF,EAAOG,mBAClB,+CAAqBH,EAAOI,YAAYC,gBACxC,2CAAiBL,EAAOM,OAAOC,aAE9BP,EAAOQ,MAAMT,KAAI,SAACU,GACjB,OAAa,OAATA,EAEA,yBACEC,IAAI,0FACJrB,UAAU,WACVsB,IAAI,OACJV,IAAKQ,IAIT,yBACEC,IAAKD,EAAKG,MACVD,IAAI,OACJV,IAAKQ,EAAKG,MACVvB,UAAU,gBAIhB,qCCzEZwB,EAAS,IAAIC,eAAa,CAC9BC,IAAK,kCACLC,MAAO,IAAIC,kBAGbC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,iBAAD,CAAgBP,OAAQA,GACtB,kBAAC,EAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.54696f5d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [year, setYear] = useState(null);\n\n  const GET_DATA = gql`\n    query GetData($year: Date!) {\n      launchesPast(find: { launch_date_local: $year }) {\n        mission_name\n        launch_date_local\n        launch_site {\n          site_name_long\n        }\n        rocket {\n          rocket_name\n        }\n        ships {\n          image\n        }\n      }\n    }\n  `;\n\n  const [getLaunches, { loading, data }] = useLazyQuery(GET_DATA);\n\n  const getValue = (event) => {\n    setYear(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <input\n          type=\"text\"\n          placeholder=\"Please enter year\"\n          className=\"input\"\n          onChange={getValue}\n        ></input>\n\n        <button\n          onClick={() => getLaunches({ variables: { year } })}\n          className=\"button\"\n        >\n          Get Launches\n        </button>\n\n        {loading && <p>Loading please...</p>}\n\n        {data?.launchesPast && (\n          <ul>\n            {data.launchesPast.map((launch) => {\n              return (\n                <li key={launch.mission_name}>\n                  <p>mission name: {launch.mission_name}</p>\n                  <p>start: {launch.launch_date_local}</p>\n                  <p>launch platform: {launch.launch_site.site_name_long}</p>\n                  <p>rocket name: {launch.rocket.rocket_name}</p>\n\n                  {launch.ships.map((ship) => {\n                    if (ship === null)\n                      return (\n                        <img\n                          src=\"https://media.sproutsocial.com/uploads/2017/02/10x-featured-social-media-image-size.png\"\n                          className=\"ship-img\"\n                          alt=\"ship\"\n                          key={ship}\n                        />\n                      );\n                    return (\n                      <img\n                        src={ship.image}\n                        alt=\"ship\"\n                        key={ship.image}\n                        className=\"ship-img\"\n                      />\n                    );\n                  })}\n                  <hr></hr>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst client = new ApolloClient({\n  uri: \"https://api.spacex.land/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}